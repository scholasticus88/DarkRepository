//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.7.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:\Src\dark_repository\Evaluator\\Evaluator.g4 by ANTLR 4.7.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.7.1")]
[System.CLSCompliant(false)]
public partial class EvaluatorParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		ID=1, NUM=2, FACTOR=3, COMMA=4, LBRACK=5, RBRACK=6, MUL=7, DIV=8, PLUS=9, 
		MINUS=10, ASS=11, WS=12;
	public const int
		RULE_prog = 0, RULE_cmd = 1, RULE_expr = 2, RULE_factor = 3;
	public static readonly string[] ruleNames = {
		"prog", "cmd", "expr", "factor"
	};

	private static readonly string[] _LiteralNames = {
		null, null, null, "'!'", "';'", "'('", "')'", "'*'", "'/'", "'+'", "'-'", 
		"'='"
	};
	private static readonly string[] _SymbolicNames = {
		null, "ID", "NUM", "FACTOR", "COMMA", "LBRACK", "RBRACK", "MUL", "DIV", 
		"PLUS", "MINUS", "ASS", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Evaluator.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static EvaluatorParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public EvaluatorParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public EvaluatorParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}
	public partial class ProgContext : ParserRuleContext {
		public CmdContext[] cmd() {
			return GetRuleContexts<CmdContext>();
		}
		public CmdContext cmd(int i) {
			return GetRuleContext<CmdContext>(i);
		}
		public ProgContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_prog; } }
		public override void EnterRule(IParseTreeListener listener) {
			IEvaluatorListener typedListener = listener as IEvaluatorListener;
			if (typedListener != null) typedListener.EnterProg(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEvaluatorListener typedListener = listener as IEvaluatorListener;
			if (typedListener != null) typedListener.ExitProg(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEvaluatorVisitor<TResult> typedVisitor = visitor as IEvaluatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProg(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProgContext prog() {
		ProgContext _localctx = new ProgContext(Context, State);
		EnterRule(_localctx, 0, RULE_prog);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 9;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 8; cmd();
				}
				}
				State = 11;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ID) | (1L << NUM) | (1L << LBRACK))) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CmdContext : ParserRuleContext {
		public CmdContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cmd; } }
	 
		public CmdContext() { }
		public virtual void CopyFrom(CmdContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ExpressionCommandContext : CmdContext {
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ExpressionCommandContext(CmdContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEvaluatorListener typedListener = listener as IEvaluatorListener;
			if (typedListener != null) typedListener.EnterExpressionCommand(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEvaluatorListener typedListener = listener as IEvaluatorListener;
			if (typedListener != null) typedListener.ExitExpressionCommand(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEvaluatorVisitor<TResult> typedVisitor = visitor as IEvaluatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionCommand(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AssignmentCommandContext : CmdContext {
		public ITerminalNode ID() { return GetToken(EvaluatorParser.ID, 0); }
		public ITerminalNode ASS() { return GetToken(EvaluatorParser.ASS, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ITerminalNode COMMA() { return GetToken(EvaluatorParser.COMMA, 0); }
		public AssignmentCommandContext(CmdContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEvaluatorListener typedListener = listener as IEvaluatorListener;
			if (typedListener != null) typedListener.EnterAssignmentCommand(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEvaluatorListener typedListener = listener as IEvaluatorListener;
			if (typedListener != null) typedListener.ExitAssignmentCommand(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEvaluatorVisitor<TResult> typedVisitor = visitor as IEvaluatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignmentCommand(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CmdContext cmd() {
		CmdContext _localctx = new CmdContext(Context, State);
		EnterRule(_localctx, 2, RULE_cmd);
		try {
			State = 19;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1,Context) ) {
			case 1:
				_localctx = new AssignmentCommandContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 13; Match(ID);
				State = 14; Match(ASS);
				State = 15; expr(0);
				State = 16; Match(COMMA);
				}
				break;
			case 2:
				_localctx = new ExpressionCommandContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 18; expr(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExprContext : ParserRuleContext {
		public ExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expr; } }
	 
		public ExprContext() { }
		public virtual void CopyFrom(ExprContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class BrackExprContext : ExprContext {
		public ITerminalNode LBRACK() { return GetToken(EvaluatorParser.LBRACK, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ITerminalNode RBRACK() { return GetToken(EvaluatorParser.RBRACK, 0); }
		public FactorContext factor() {
			return GetRuleContext<FactorContext>(0);
		}
		public BrackExprContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEvaluatorListener typedListener = listener as IEvaluatorListener;
			if (typedListener != null) typedListener.EnterBrackExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEvaluatorListener typedListener = listener as IEvaluatorListener;
			if (typedListener != null) typedListener.ExitBrackExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEvaluatorVisitor<TResult> typedVisitor = visitor as IEvaluatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBrackExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MulDivContext : ExprContext {
		public IToken op;
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ITerminalNode MUL() { return GetToken(EvaluatorParser.MUL, 0); }
		public ITerminalNode DIV() { return GetToken(EvaluatorParser.DIV, 0); }
		public MulDivContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEvaluatorListener typedListener = listener as IEvaluatorListener;
			if (typedListener != null) typedListener.EnterMulDiv(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEvaluatorListener typedListener = listener as IEvaluatorListener;
			if (typedListener != null) typedListener.ExitMulDiv(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEvaluatorVisitor<TResult> typedVisitor = visitor as IEvaluatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMulDiv(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AddSubContext : ExprContext {
		public IToken op;
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ITerminalNode PLUS() { return GetToken(EvaluatorParser.PLUS, 0); }
		public ITerminalNode MINUS() { return GetToken(EvaluatorParser.MINUS, 0); }
		public AddSubContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEvaluatorListener typedListener = listener as IEvaluatorListener;
			if (typedListener != null) typedListener.EnterAddSub(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEvaluatorListener typedListener = listener as IEvaluatorListener;
			if (typedListener != null) typedListener.ExitAddSub(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEvaluatorVisitor<TResult> typedVisitor = visitor as IEvaluatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAddSub(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VariableFactorContext : ExprContext {
		public ITerminalNode ID() { return GetToken(EvaluatorParser.ID, 0); }
		public FactorContext factor() {
			return GetRuleContext<FactorContext>(0);
		}
		public VariableFactorContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEvaluatorListener typedListener = listener as IEvaluatorListener;
			if (typedListener != null) typedListener.EnterVariableFactor(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEvaluatorListener typedListener = listener as IEvaluatorListener;
			if (typedListener != null) typedListener.ExitVariableFactor(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEvaluatorVisitor<TResult> typedVisitor = visitor as IEvaluatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableFactor(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NumberFactorContext : ExprContext {
		public ITerminalNode NUM() { return GetToken(EvaluatorParser.NUM, 0); }
		public FactorContext factor() {
			return GetRuleContext<FactorContext>(0);
		}
		public NumberFactorContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEvaluatorListener typedListener = listener as IEvaluatorListener;
			if (typedListener != null) typedListener.EnterNumberFactor(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEvaluatorListener typedListener = listener as IEvaluatorListener;
			if (typedListener != null) typedListener.ExitNumberFactor(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEvaluatorVisitor<TResult> typedVisitor = visitor as IEvaluatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumberFactor(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExprContext expr() {
		return expr(0);
	}

	private ExprContext expr(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExprContext _localctx = new ExprContext(Context, _parentState);
		ExprContext _prevctx = _localctx;
		int _startState = 4;
		EnterRecursionRule(_localctx, 4, RULE_expr, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 31;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LBRACK:
				{
				_localctx = new BrackExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 22; Match(LBRACK);
				State = 23; expr(0);
				State = 24; Match(RBRACK);
				State = 25; factor();
				}
				break;
			case ID:
				{
				_localctx = new VariableFactorContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 27; Match(ID);
				State = 28; factor();
				}
				break;
			case NUM:
				{
				_localctx = new NumberFactorContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 29; Match(NUM);
				State = 30; factor();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 41;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,4,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 39;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,3,Context) ) {
					case 1:
						{
						_localctx = new MulDivContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 33;
						if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
						State = 34;
						((MulDivContext)_localctx).op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==MUL || _la==DIV) ) {
							((MulDivContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 35; expr(6);
						}
						break;
					case 2:
						{
						_localctx = new AddSubContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 36;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 37;
						((AddSubContext)_localctx).op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==PLUS || _la==MINUS) ) {
							((AddSubContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 38; expr(5);
						}
						break;
					}
					} 
				}
				State = 43;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,4,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class FactorContext : ParserRuleContext {
		public ITerminalNode FACTOR() { return GetToken(EvaluatorParser.FACTOR, 0); }
		public FactorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_factor; } }
		public override void EnterRule(IParseTreeListener listener) {
			IEvaluatorListener typedListener = listener as IEvaluatorListener;
			if (typedListener != null) typedListener.EnterFactor(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEvaluatorListener typedListener = listener as IEvaluatorListener;
			if (typedListener != null) typedListener.ExitFactor(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEvaluatorVisitor<TResult> typedVisitor = visitor as IEvaluatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFactor(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FactorContext factor() {
		FactorContext _localctx = new FactorContext(Context, State);
		EnterRule(_localctx, 6, RULE_factor);
		try {
			State = 46;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,5,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 44; Match(FACTOR);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 2: return expr_sempred((ExprContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expr_sempred(ExprContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 5);
		case 1: return Precpred(Context, 4);
		}
		return true;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\xE', '\x33', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x3', 
		'\x2', '\x6', '\x2', '\f', '\n', '\x2', '\r', '\x2', '\xE', '\x2', '\r', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x5', '\x3', '\x16', '\n', '\x3', '\x3', '\x4', '\x3', 
		'\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', 
		'\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x5', '\x4', '\"', '\n', 
		'\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', 
		'\x4', '\x3', '\x4', '\a', '\x4', '*', '\n', '\x4', '\f', '\x4', '\xE', 
		'\x4', '-', '\v', '\x4', '\x3', '\x5', '\x3', '\x5', '\x5', '\x5', '\x31', 
		'\n', '\x5', '\x3', '\x5', '\x2', '\x3', '\x6', '\x6', '\x2', '\x4', '\x6', 
		'\b', '\x2', '\x4', '\x3', '\x2', '\t', '\n', '\x3', '\x2', '\v', '\f', 
		'\x2', '\x35', '\x2', '\v', '\x3', '\x2', '\x2', '\x2', '\x4', '\x15', 
		'\x3', '\x2', '\x2', '\x2', '\x6', '!', '\x3', '\x2', '\x2', '\x2', '\b', 
		'\x30', '\x3', '\x2', '\x2', '\x2', '\n', '\f', '\x5', '\x4', '\x3', '\x2', 
		'\v', '\n', '\x3', '\x2', '\x2', '\x2', '\f', '\r', '\x3', '\x2', '\x2', 
		'\x2', '\r', '\v', '\x3', '\x2', '\x2', '\x2', '\r', '\xE', '\x3', '\x2', 
		'\x2', '\x2', '\xE', '\x3', '\x3', '\x2', '\x2', '\x2', '\xF', '\x10', 
		'\a', '\x3', '\x2', '\x2', '\x10', '\x11', '\a', '\r', '\x2', '\x2', '\x11', 
		'\x12', '\x5', '\x6', '\x4', '\x2', '\x12', '\x13', '\a', '\x6', '\x2', 
		'\x2', '\x13', '\x16', '\x3', '\x2', '\x2', '\x2', '\x14', '\x16', '\x5', 
		'\x6', '\x4', '\x2', '\x15', '\xF', '\x3', '\x2', '\x2', '\x2', '\x15', 
		'\x14', '\x3', '\x2', '\x2', '\x2', '\x16', '\x5', '\x3', '\x2', '\x2', 
		'\x2', '\x17', '\x18', '\b', '\x4', '\x1', '\x2', '\x18', '\x19', '\a', 
		'\a', '\x2', '\x2', '\x19', '\x1A', '\x5', '\x6', '\x4', '\x2', '\x1A', 
		'\x1B', '\a', '\b', '\x2', '\x2', '\x1B', '\x1C', '\x5', '\b', '\x5', 
		'\x2', '\x1C', '\"', '\x3', '\x2', '\x2', '\x2', '\x1D', '\x1E', '\a', 
		'\x3', '\x2', '\x2', '\x1E', '\"', '\x5', '\b', '\x5', '\x2', '\x1F', 
		' ', '\a', '\x4', '\x2', '\x2', ' ', '\"', '\x5', '\b', '\x5', '\x2', 
		'!', '\x17', '\x3', '\x2', '\x2', '\x2', '!', '\x1D', '\x3', '\x2', '\x2', 
		'\x2', '!', '\x1F', '\x3', '\x2', '\x2', '\x2', '\"', '+', '\x3', '\x2', 
		'\x2', '\x2', '#', '$', '\f', '\a', '\x2', '\x2', '$', '%', '\t', '\x2', 
		'\x2', '\x2', '%', '*', '\x5', '\x6', '\x4', '\b', '&', '\'', '\f', '\x6', 
		'\x2', '\x2', '\'', '(', '\t', '\x3', '\x2', '\x2', '(', '*', '\x5', '\x6', 
		'\x4', '\a', ')', '#', '\x3', '\x2', '\x2', '\x2', ')', '&', '\x3', '\x2', 
		'\x2', '\x2', '*', '-', '\x3', '\x2', '\x2', '\x2', '+', ')', '\x3', '\x2', 
		'\x2', '\x2', '+', ',', '\x3', '\x2', '\x2', '\x2', ',', '\a', '\x3', 
		'\x2', '\x2', '\x2', '-', '+', '\x3', '\x2', '\x2', '\x2', '.', '\x31', 
		'\a', '\x5', '\x2', '\x2', '/', '\x31', '\x3', '\x2', '\x2', '\x2', '\x30', 
		'.', '\x3', '\x2', '\x2', '\x2', '\x30', '/', '\x3', '\x2', '\x2', '\x2', 
		'\x31', '\t', '\x3', '\x2', '\x2', '\x2', '\b', '\r', '\x15', '!', ')', 
		'+', '\x30',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
